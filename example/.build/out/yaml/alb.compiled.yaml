---
AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  0SubnetPublic:
    Fn::Not:
    - Fn::Equals:
      - Ref: SubnetPublic0
      - ''
  1SubnetPublic:
    Fn::Not:
    - Fn::Equals:
      - Ref: SubnetPublic1
      - ''
  2SubnetPublic:
    Fn::And:
    - Fn::Not:
      - Fn::Equals:
        - Ref: SubnetPublic2
        - ''
    - Fn::Not:
      - Fn::Equals:
        - Ref: SubnetPublic1
        - ''
  3SubnetPublic:
    Fn::And:
    - Fn::Not:
      - Fn::Equals:
        - Ref: SubnetPublic3
        - ''
    - Fn::And:
      - Fn::Not:
        - Fn::Equals:
          - Ref: SubnetPublic2
          - ''
      - Fn::Not:
        - Fn::Equals:
          - Ref: SubnetPublic1
          - ''
  4SubnetPublic:
    Fn::And:
    - Fn::Not:
      - Fn::Equals:
        - Ref: SubnetPublic4
        - ''
    - Fn::And:
      - Fn::Not:
        - Fn::Equals:
          - Ref: SubnetPublic3
          - ''
      - Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - Ref: SubnetPublic2
            - ''
        - Fn::Not:
          - Fn::Equals:
            - Ref: SubnetPublic1
            - ''
Resources:
  SecurityGroupLoadBalancer:
    Properties:
      GroupDescription:
        Fn::Join:
        - " "
        - - Ref: EnvironmentName
          - alb
      VpcId:
        Ref: VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 127.0.0.1/32
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 127.0.0.1/32
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp:
          Fn::Join:
          - ''
          - - '10.'
            - Ref: StackOctet
            - "."
            - 0.0/16
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp:
          Fn::Join:
          - ''
          - - '10.'
            - Ref: StackOctet
            - "."
            - 0.0/16
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 104.192.143.192/28
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 104.192.143.208/28
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 104.192.136.0/21
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 34.198.203.127/32
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 34.198.178.64/32
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 34.198.32.85/32
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 104.192.143.192/28
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 104.192.143.208/28
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 104.192.136.0/21
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 34.198.203.127/32
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 34.198.178.64/32
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 34.198.32.85/32
    Type: AWS::EC2::SecurityGroup
  LoadBalancer:
    Properties:
      Subnets:
        Fn::If:
        - 4SubnetPublic
        - - Ref: SubnetPublic0
          - Ref: SubnetPublic1
          - Ref: SubnetPublic2
          - Ref: SubnetPublic3
          - Ref: SubnetPublic4
        - Fn::If:
          - 3SubnetPublic
          - - Ref: SubnetPublic0
            - Ref: SubnetPublic1
            - Ref: SubnetPublic2
            - Ref: SubnetPublic3
          - Fn::If:
            - 2SubnetPublic
            - - Ref: SubnetPublic0
              - Ref: SubnetPublic1
              - Ref: SubnetPublic2
            - Fn::If:
              - 1SubnetPublic
              - - Ref: SubnetPublic0
                - Ref: SubnetPublic1
              - Ref: SubnetPublic1
      SecurityGroups:
      - Ref: SecurityGroupLoadBalancer
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentName
      - Key: EnvironmentType
        Value:
          Ref: EnvironmentType
      - Key: Name
        Value: public
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 120
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  defaultTargetGroup:
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: VPCId
      Tags:
      - Key: Environment
        Value:
          Ref: EnvironmentName
      - Key: EnvironmentType
        Value:
          Ref: EnvironmentType
      - Key: Name
        Value: Default-HTTP
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  httpListener:
    Properties:
      Protocol: HTTP
      Port: 80
      DefaultActions:
      - TargetGroupArn:
          Ref: defaultTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
  httpsListener:
    Properties:
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          Ref: SslCertId
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      Port: 443
      DefaultActions:
      - TargetGroupArn:
          Ref: defaultTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
  WildcardLoadBalancerRecord:
    Properties:
      HostedZoneName:
        Fn::Join:
        - ''
        - - Ref: EnvironmentName
          - "."
          - Ref: DnsDomain
          - "."
      Name:
        Fn::Join:
        - ''
        - - "*."
          - Ref: EnvironmentName
          - "."
          - Ref: DnsDomain
          - "."
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - LoadBalancer
          - DNSName
        HostedZoneId:
          Fn::GetAtt:
          - LoadBalancer
          - CanonicalHostedZoneID
    Type: AWS::Route53::RecordSet
Outputs:
  defaultTargetGroup:
    Value:
      Ref: defaultTargetGroup
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-alb-defaultTargetGroup"
  httpListener:
    Value:
      Ref: httpListener
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-alb-httpListener"
  httpsListener:
    Value:
      Ref: httpsListener
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-alb-httpsListener"
  LoadBalancer:
    Value:
      Ref: LoadBalancer
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-alb-LoadBalancer"
  SecurityGroupLoadBalancer:
    Value:
      Ref: SecurityGroupLoadBalancer
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-alb-SecurityGroupLoadBalancer"
  CfTemplateUrl:
    Value: https://855280047356.ap-southeast-2.ciinabox.s3.amazonaws.com/cloudformation/ciinabox-example/0.1.0/loadbalancer.compiled.yaml
  CfTemplateVersion:
    Value: 0.1.0
Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    NoEcho: false
  EnvironmentType:
    Type: String
    Default: development
    NoEcho: false
  StackOctet:
    Type: String
    Default: ''
    NoEcho: false
  DnsDomain:
    Type: String
    Default: ''
    NoEcho: false
  SslCertId:
    Type: String
    Default: ''
    NoEcho: false
  SubnetPublic0:
    Type: String
    Default: ''
    NoEcho: false
  SubnetPublic1:
    Type: String
    Default: ''
    NoEcho: false
  SubnetPublic2:
    Type: String
    Default: ''
    NoEcho: false
  SubnetPublic3:
    Type: String
    Default: ''
    NoEcho: false
  SubnetPublic4:
    Type: String
    Default: ''
    NoEcho: false
  VPCId:
    Type: AWS::EC2::VPC::Id
    Default: ''
    NoEcho: false
Description: alb - v0.1.0 (loadbalancer@latest)
