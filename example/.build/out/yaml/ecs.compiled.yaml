---
AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  0SubnetCompute:
    Fn::Not:
    - Fn::Equals:
      - Ref: SubnetCompute0
      - ''
  1SubnetCompute:
    Fn::Not:
    - Fn::Equals:
      - Ref: SubnetCompute1
      - ''
  2SubnetCompute:
    Fn::And:
    - Fn::Not:
      - Fn::Equals:
        - Ref: SubnetCompute2
        - ''
    - Fn::Not:
      - Fn::Equals:
        - Ref: SubnetCompute1
        - ''
  3SubnetCompute:
    Fn::And:
    - Fn::Not:
      - Fn::Equals:
        - Ref: SubnetCompute3
        - ''
    - Fn::And:
      - Fn::Not:
        - Fn::Equals:
          - Ref: SubnetCompute2
          - ''
      - Fn::Not:
        - Fn::Equals:
          - Ref: SubnetCompute1
          - ''
  4SubnetCompute:
    Fn::And:
    - Fn::Not:
      - Fn::Equals:
        - Ref: SubnetCompute4
        - ''
    - Fn::And:
      - Fn::Not:
        - Fn::Equals:
          - Ref: SubnetCompute3
          - ''
      - Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - Ref: SubnetCompute2
            - ''
        - Fn::Not:
          - Fn::Equals:
            - Ref: SubnetCompute1
            - ''
Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
  SecurityGroupEcs:
    Properties:
      GroupDescription:
        Fn::Join:
        - " "
        - - Ref: EnvironmentName
          - ecs
      VpcId:
        Ref: VPCId
    Type: AWS::EC2::SecurityGroup
  LoadBalancerIngressRule:
    Properties:
      Description: Ephemeral port range for ECS
      IpProtocol: tcp
      FromPort: '32768'
      ToPort: '65535'
      GroupId:
        Fn::GetAtt:
        - SecurityGroupEcs
        - GroupId
      SourceSecurityGroupId:
        Ref: SecurityGroupLoadBalancer
    Type: AWS::EC2::SecurityGroupIngress
  BastionIngressRule:
    Properties:
      Description: SSH access from bastion
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      GroupId:
        Fn::GetAtt:
        - SecurityGroupEcs
        - GroupId
      SourceSecurityGroupId:
        Ref: SecurityGroupBastion
    Type: AWS::EC2::SecurityGroupIngress
  Role:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-container-instance
        PolicyDocument:
          Statement:
          - Sid: ecscontainerinstance
            Action:
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
            Effect: Allow
      - PolicyName: ecs-service-scheduler
        PolicyDocument:
          Statement:
          - Sid: ecsservicescheduler
            Action:
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:RegisterTargets
            Resource: "*"
            Effect: Allow
    Type: AWS::IAM::Role
  InstanceProfile:
    Properties:
      Path: "/"
      Roles:
      - Ref: Role
    Type: AWS::IAM::InstanceProfile
  LaunchConfig:
    Properties:
      ImageId:
        Ref: Ami
      InstanceType:
        Ref: InstanceType
      AssociatePublicIpAddress: false
      IamInstanceProfile:
        Ref: InstanceProfile
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: SecurityGroupEcs
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - 'INSTANCE_ID=$(/opt/aws/bin/ec2-metadata --instance-id|/usr/bin/awk
              ''{print $2}'')

'
            - 'hostname '
            - Ref: EnvironmentName
            - "-ecs-${INSTANCE_ID}\n"
            - sed '/HOSTNAME/d' /etc/sysconfig/network > /tmp/network && mv -f /tmp/network
              /etc/sysconfig/network && echo "HOSTNAME=
            - Ref: EnvironmentName
            - '-ecs-${INSTANCE_ID}" >>/etc/sysconfig/network && /etc/init.d/network
              restart

'
            - echo ECS_CLUSTER=
            - Ref: EcsCluster
            - " >> /etc/ecs/ecs.config\n"
    Type: AWS::AutoScaling::LaunchConfiguration
  AutoScaleGroup:
    Properties:
      LaunchConfigurationName:
        Ref: LaunchConfig
      HealthCheckGracePeriod: '500'
      MinSize:
        Ref: AsgMin
      MaxSize:
        Ref: AsgMax
      VPCZoneIdentifier:
        Fn::If:
        - 4SubnetCompute
        - - Ref: SubnetCompute0
          - Ref: SubnetCompute1
          - Ref: SubnetCompute2
          - Ref: SubnetCompute3
          - Ref: SubnetCompute4
        - Fn::If:
          - 3SubnetCompute
          - - Ref: SubnetCompute0
            - Ref: SubnetCompute1
            - Ref: SubnetCompute2
            - Ref: SubnetCompute3
          - Fn::If:
            - 2SubnetCompute
            - - Ref: SubnetCompute0
              - Ref: SubnetCompute1
              - Ref: SubnetCompute2
            - Fn::If:
              - 1SubnetCompute
              - - Ref: SubnetCompute0
                - Ref: SubnetCompute1
              - Ref: SubnetCompute1
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: EnvironmentName
            - ecs
            - xx
        PropagateAtLaunch: true
      - Key: Environment
        Value:
          Ref: EnvironmentName
        PropagateAtLaunch: true
      - Key: EnvironmentType
        Value:
          Ref: EnvironmentType
        PropagateAtLaunch: true
      - Key: Role
        Value: ecs
        PropagateAtLaunch: true
    Type: AWS::AutoScaling::AutoScalingGroup
  LogGroup:
    Properties:
      LogGroupName:
        Ref: AWS::StackName
      RetentionInDays: '14'
    Type: AWS::Logs::LogGroup
Outputs:
  EcsCluster:
    Value:
      Ref: EcsCluster
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-ecs-EcsCluster"
  EcsClusterArn:
    Value:
      Fn::GetAtt:
      - EcsCluster
      - Arn
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-ecs-EcsClusterArn"
  EcsSecurityGroup:
    Value:
      Ref: SecurityGroupEcs
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-ecs-EcsSecurityGroup"
  CfTemplateUrl:
    Value: https://855280047356.ap-southeast-2.ciinabox.s3.amazonaws.com/cloudformation/ciinabox-example/0.1.0/ecs.compiled.yaml
  CfTemplateVersion:
    Value: 0.1.0
Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    NoEcho: false
  EnvironmentType:
    Type: String
    Default: development
    NoEcho: false
  Ami:
    Type: AWS::EC2::Image::Id
    Default: ''
    NoEcho: false
  InstanceType:
    Type: String
    Default: ''
    NoEcho: false
  AsgMin:
    Type: String
    Default: ''
    NoEcho: false
  AsgMax:
    Type: String
    Default: ''
    NoEcho: false
  KeyName:
    Type: String
    Default: ''
    NoEcho: false
  DnsDomain:
    Type: String
    Default: ''
    NoEcho: false
  SubnetCompute0:
    Type: String
    Default: ''
    NoEcho: false
  SubnetCompute1:
    Type: String
    Default: ''
    NoEcho: false
  SubnetCompute2:
    Type: String
    Default: ''
    NoEcho: false
  SubnetCompute3:
    Type: String
    Default: ''
    NoEcho: false
  SubnetCompute4:
    Type: String
    Default: ''
    NoEcho: false
  VPCId:
    Type: AWS::EC2::VPC::Id
    Default: ''
    NoEcho: false
  SecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup::Id
    Default: ''
    NoEcho: false
  SecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup::Id
    Default: ''
    NoEcho: false
  StackOctet:
    Type: String
    Default: ''
    NoEcho: false
Description: ecs@master.snapshot - v0.1.0
Mappings:
  AccountId:
    '000000000000':
      KeyName: key
      DnsDomain: example.tld
  EnvironmentType:
    development:
      EcsInstanceType: t2.micro
      EcsAsgMin: 1
      EcsAsgMax: 2
    production:
      EcsInstanceType: t2.micro
      EcsAsgMin: 1
      EcsAsgMax: 2
