## ciinabox cfhighlander default config

maximum_availability_zones: 3

stack_octet: 50

ecs_instance_type: t2.small

ip_blocks:
  internal:
    - stack

vpc:
  manage_ns_records: true
  subnets:
    vpc_public:
      allocation: 0
      name: Public
      type: public
    compute:
      allocation: 1
      name: Compute
      type: private

ecs:
  security_group_rules:
    - from: 2049
      ip: ${VPCCidr}
      desc: Allow EFS access from ECS tasks
  enable_efs: false
  cluster_name: ciinabox
  iam_policies:
    rexray-efs-plugin:
      action:
        - elasticfilesystem:CreateFileSystem
        - elasticfilesystem:CreateMountTarget
        - ec2:DescribeSubnets
        - ec2:DescribeNetworkInterfaces
        - ec2:CreateNetworkInterface
        - elasticfilesystem:CreateTags
        - elasticfilesystem:DeleteMountTarget
        - ec2:DeleteNetworkInterface
        - elasticfilesystem:DescribeFileSystems
        - elasticfilesystem:DescribeMountTargets
        - elasticfilesystem:DeleteMountTarget
    ssm-ssh-access:
      action:
        - ssm:UpdateInstanceInformation
        - ssm:ListInstanceAssociations
        - ec2messages:GetMessages
        - ssmmessages:CreateControlChannel
        - ssmmessages:CreateDataChannel
        - ssmmessages:OpenControlChannel
        - ssmmessages:OpenDataChannel
  instance_tags:
    Name: ${EnvironmentName}-ciinabox-ecs-xx
    ciinabox:jenkins:label: master
    ciinabox:jenkins:type: master
  userdata: |
    INSTANCE_ID=$(/opt/aws/bin/ec2-metadata --instance-id|/usr/bin/awk '{print $2}')
    hostname ${EnvironmentName}-ecs-${!INSTANCE_ID}
    sed '/HOSTNAME/d' /etc/sysconfig/network > /tmp/network && mv -f /tmp/network /etc/sysconfig/network && echo "HOSTNAME=${EnvironmentName}-ecs-${!INSTANCE_ID}" >>/etc/sysconfig/network && /etc/init.d/network restart
    echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
    yum install -y amazon-efs-utils nfs-utils amazon-ssm-agent
    systemctl start amazon-ssm-agent
    docker plugin install rexray/efs REXRAY_PREEMPT=true EFS_REGION=${AWS::Region} EFS_SECURITYGROUPS=${SecurityGroupEcs} --grant-all-permissions
    systemctl restart docker


loadbalancer:
  loadbalancer_attributes:
    idle_timeout.timeout_seconds: 300
  
  records:
    - "*"
    
  security_group_rules:
    -
      from: 80
      ip_blocks:
        - webhooks
        - whitelist
      desc: public HTTP access
    -
      from: 443
      ip_blocks:
        - webhooks
        - whitelist
      desc: public HTTPS access
      
  listeners:
    http:
      port: 80
      protocol: http
      default:
        action:
          redirect: http_to_https
    https:
      port: 443
      protocol: https
      ssl_policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      default:
        certificate: website
        action:
          fixed:
            type: text/html
            code: 404
            body: |
              <!DOCTYPE html>
              <html>
                <body>
                  <h2>404</h2>
                  <h3><span id="demo" style="color: red"></span> ciinabox service not found</h3>
                  <script>
                  document.getElementById("demo").innerHTML = location.hostname;
                  </script>
                </body>
              </html> 

            

jenkins:
  network_mode: awsvpc
  health_check_grace_period: 120
  volumes:
    - docker-socket:/var/run/docker.sock
    - Name:
        Fn::Sub: ${EnvironmentName}-ciinabox-jenkins-master
      DockerVolumeConfiguration:
        Driver: rexray/efs
        Scope: shared
        Autoprovision: true
  task_definition:
    jenkins:
      image: cloudbees/cloudbees-jenkins-distribution
      tag_param: Version
      tag_param_default: latest
      env_vars:
        ENVIRONMENT_NAME:
          Fn::Sub: ${EnvironmentName}
        AWS_REGION:
          Fn::Sub: ${AWS::Region}
        CASC_JENKINS_CONFIG:
          Fn::Sub: https://s3-${AWS::Region}.amazonaws.com/${S3Bucket}/${EnvironmentName}/jenkins/jenkins.yaml
        JAVA_OPTS: 
          Fn::Sub: >-
            -Dcb.BeekeeperProp.noFullUpgrade=true
            -Dcb.BeekeeperProp.disableIncrementalWizard=true
            -Dhudson.TcpSlaveAgentListener.hostName=jenkins.${EnvironmentName}.ciinabox 
            -Dhudson.TcpSlaveAgentListener.port=50000
      secrets:
        CIINABOX_KEYPAIR: 
          Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ciinabox/keypair/${EnvironmentName}
      ports:
        - 8080
        - 50000
      mounts:
        - /var/run/docker.sock:docker-socket
        - ContainerPath: /var/cloudbees-jenkins-distribution
          SourceVolume:
            Fn::Sub: ${EnvironmentName}-ciinabox-jenkins-master
          ReadOnly: false
  targetgroup:
    name: jenkins
    container: jenkins
    port: 8080
    protocol: http
    listener: https
    type: ip
    healthcheck:
      interval: 30
      timeout: 10
      healthy_count: 2
      unhealthy_count: 10
      path: /login
      code: 200
    rules:
      - name:  jenkins
        host: jenkins.*
        priority: 1000
    attributes:
      deregistration_delay.timeout_seconds: 10
  iam_policies:
    cross-account-sts:
      action:
        - sts:AssumeRole
    iam-pass-role:
      action:
        - iam:ListRoles
        - iam:PassRole
        - iam:ListInstanceProfiles
    ecs-jenkins-plugin:
      action:
        - ecs:ListClusters
        - ecs:DescribeContainerInstances
        - ecs:RegisterTaskDefinition
        - ecs:DeregisterTaskDefinition
        - ecs:ListTaskDefinitions
        - ecs:DescribeTaskDefinition
        - ecs:RunTask
        - ecs:StopTask
        - ecs:ListContainerInstances
        - ecs:DescribeTasks
    ec2-fleet-plugin:
      action:
        - ec2:*
    s3-list-ciinabox-bucket:
      action:
        - s3:ListBucket
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}
    s3-rw:
      action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:GetObjectVersion
        - s3:PutObject
        - s3:PutObjectAcl
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
    ecr-mamange-repos:
      action:
        - ecr:*
  service_discovery:
    name: jenkins
    container_name: jenkins
  securityGroups:
    jenkins:
      -
        rules:
          -
            IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
          -
            IpProtocol: tcp
            FromPort: 50000
            ToPort: 50000
        ips:
          - stack

<%- @config['agents'].each do |agent| %>
<%= agent['name'] %>:
  name: ${EnvironmentName}-ciinabox-<%= agent['name'] %>-agent
  security_groups:
    - name: ssh
      from: 22
      cidrip:
        Fn::Sub: ${VPCCidr}
      desc: Allow Jenkins master to connect to the <%= agent['name'] %> agents on ssh
  maximum_availability_zones: 3
  enable_efs: false
  instance_tags:
    Name: ${EnvironmentName}-ciinabox-<%= agent['name'] %>-agents-xx
    ciinabox:agent:name: <%= agent['name'] %>
    ciinabox:agent:os: <%= agent['os'] %>
  iam_policies:
    cross-account-sts:
      action:
        - sts:AssumeRole
    ssm-ssh-access:
      action:
        - ssm:UpdateInstanceInformation
        - ssm:ListInstanceAssociations
        - ec2messages:GetMessages
        - ssmmessages:CreateControlChannel
        - ssmmessages:CreateDataChannel
        - ssmmessages:OpenControlChannel
        - ssmmessages:OpenDataChannel
    s3-list-ciinabox-bucket:
      action:
        - s3:ListBucket
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}
    s3-rw-ciinabox-bucket:
      action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:GetObjectVersion
        - s3:PutObject
        - s3:PutObjectAcl
      resource:
        - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
  userdata: |
  <%- if agent['os'] == 'linux' -%>
    #!/bin/bash
    set -o xtrace
    INSTANCE_ID=$(/opt/aws/bin/ec2-metadata --instance-id|/usr/bin/awk '{print $2}')
    hostnamectl set-hostname ${!INSTANCE_ID}.${EnvironmentName}.ciinabox
    systemctl restart network
    yum install -y java-1.8.0 git docker amazon-ssm-agent
    usermod -a -G docker ec2-user
    systemctl start amazon-ssm-agent
    systemctl start docker
  <%- elsif agent['os'] == 'windows' -%>
    <powershell>
    Restart-Service AmazonSSMAgent
    </powershell>
  <%- end -%>
<%- end -%>

config_export:
  global:
    - maximum_availability_zones
    - ip_blocks
